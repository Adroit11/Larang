!function(){"use strict";angular.module("timeTracker",["ngResource","ui.bootstrap"])}();
!function(){"use strict";function TimeEntry(time,user,$scope){function getUsers(){user.getUsers().then(function(result){vm.users=result},function(error){console.log(error)})}function getTimeEntries(){time.getTime().then(function(results){vm.timeEntries=results,updateTotalTime(vm.timeEntries)},function(error){console.log(error)})}function updateTotalTime(timeEntries){vm.totalTime=time.getTotalTime(timeEntries)}var vm=this;vm.timeEntries=[],vm.totalTime={},vm.users=[],vm.clockIn=moment(),vm.clockOut=moment(),getTimeEntries(),getUsers(),vm.updateTimeEntry=function(timeEntry){var updatedTimeEntry={id:timeEntry.id,user_id:timeEntry.user.id,start_time:timeEntry.start_time,end_time:timeEntry.end_time,comment:timeEntry.comment};time.updateTime(updatedTimeEntry).then(function(success){getTimeEntries(),$scope.showEditDialog=!1,console.log(sucess)},function(error){console.log(error)})},vm.deleteTimeEntry=function(timeEntry){var id=timeEntry.id;time.deleteTime(id).then(function(success){getTimeEntries()},function(error){console.log(error)})},vm.logNewTime=function(){return vm.clockOut<vm.clockIn?void alert("You can't clock out before you clock in!"):vm.clockOut-vm.clockIn===0?void alert("Your time entry has to be greater than zero!"):(time.saveTime({user_id:vm.timeEntryUser.id,start_time:vm.clockIn,end_time:vm.clockOut,comment:vm.comment}).then(function(success){getTimeEntries(),console.log(success)},function(error){console.log(error)}),getTimeEntries(),vm.clockIn=moment(),vm.clockOut=moment(),vm.timeEntryUser="",void(vm.comment=""))}}angular.module("timeTracker").controller("TimeEntry",TimeEntry)}();
!function(){"use strict";function time($resource){function updateTime(data){return Time.update({id:data.id},data).$promise.then(function(success){console.log(success)},function(error){console.log(error)})}function saveTime(data){return Time.save(data).$promise.then(function(){console.log(success)},function(error){console.log(error)})}function deleteTime(id){return Time["delete"]({id:id}).$promise.then(function(success){console.log(success)},function(error){console.log(error)})}function getTime(){return Time.query().$promise.then(function(results){return angular.forEach(results,function(result){result.loggedTime=getTimeDiff(result.start_time,result.end_time)}),results},function(error){console.log(error)})}function getTimeDiff(start,end){var diff=moment(end).diff(moment(start)),duration=moment.duration(diff);return{duration:duration}}function getTotalTime(timeEntries){var totalMilliseconds=0;return angular.forEach(timeEntries,function(key){totalMilliseconds+=key.loggedTime.duration._milliseconds}),{hours:Math.floor(moment.duration(totalMilliseconds).asHours()),minutes:moment.duration(totalMilliseconds).minutes()}}var Time=$resource("api/v1/time/:id",{},{update:{method:"PUT"}});return{getTime:getTime,getTimeDiff:getTimeDiff,getTotalTime:getTotalTime,saveTime:saveTime,updateTime:updateTime,deleteTime:deleteTime}}angular.module("timeTracker").factory("time",time)}();
!function(){"use strict";function user($resource){function getUsers(){return User.query().$promise.then(function(results){return results},function(error){console.log(error)})}var User=$resource("api/v1/user");return{getUsers:getUsers}}angular.module("timeTracker").factory("user",user)}();